[
["index.html", "Elegant and informative maps with tmap Welcome How to contribute?", " Elegant and informative maps with tmap Martijn Tennekes, Jakub Nowosad 2020-06-20 Welcome This is the online home of Elegant and informative maps with tmap, a book on geospatial data visualization with the R-package tmap. This version of the book was built on GH Actions on 2020-06-20. How to contribute? "],
["intro.html", "Chapter 1 Introduction 1.1 What is tmap? 1.2 Thematic maps", " Chapter 1 Introduction This book teaches how to make elegant and informative maps with the R-package tmap. A couple of real-world applications are used to illustrate the whole process from exploring raw spatial data to presenting insightful results. We can distinguish three aspects that are required to make good maps: Software skills Without knowing how to use software for making maps, it will obviously be challenging to make maps with the computer. Yes, back in the old days, people like Henry Drury Harness and Charles Joseph Minard used pen and paper to draw maps, but the computational speed, reproducibility, and interactivity of digital maps cannot be missed. Domain knowledge It is essential to know the background of the data. Where does the data come from? What do the data units represent? What do the variables mean? Since data visualization is all about conveying information, it is obviously important to have domain knowledge in order to make good data visualizations. Data visualization knowledge Someone with software skills and knowledge of a certain domain will be able to make maps of the data. However, these maps will not necessarily be good maps, since visualization of spatial data is trickier than most people think. There are a few underlying principles in data visualization that, when violated, will result in maps that are prone to misinterpretation of the data. The main focus on this book will be on software skills, since our aim is to create maps with tmap. Along the way, we will cover the most important data visualization methodology. Since whole books have been written about it already, we will keep this brief and pragmatic. Obviously, it is not possible to cover the remaining aspect, domain knowledge. However, the example datasets do not require much specific domain knowledge. 1.1 What is tmap? The short answer is that tmap is an R package for visualization spatial data. The slightly longer answer is that tmap allows users to explore, analyze, and present spatial data in a intuitive way. In this book, you will find the long answer. 1.2 Thematic maps "],
["geodata.html", "Chapter 2 Spatial data in R 2.1 Introduction 2.2 Vector data 2.3 Raster data 2.4 CRS", " Chapter 2 Spatial data in R 2.1 Introduction Two basic models used to represent spatial data are vector and raster data model. 2.2 Vector data 2.2.1 Vector data model … The vector data model consists of two main elements: geometries and attributes. The role of geometry is to describe the location and shape of spatial objects. There are three basic types of geometries: points, lines, and polygons. All of them are build using the same main idea of coordinates. A point is represented by a pair of coordinates, usually described as X and Y. It allows for locating this point in some space. X and Y could be unitless, in degrees, or in some measure units, such as meters. Points can represents features on different scales, from a GPS position, location of a bench in a park, to a city in a small scale map. They are also used to express abstract features, such as locations of map labels. Properties of points can be expressed on maps by different point sizes, colors, or shapes. A line extends the idea of a point. It consists of several points (with coordinates) that are arranged in some order. Consecutive points are connected by straight lines. Therefore, a straight spatial line consists of two points (two pairs of coordinates), while complex spatial lines could be created based on a large number of points. It gives the illusion that the line is curved. Lines are used to represent linear features, such as roads, rivers, boundaries, footpaths, etc. In this case, we can express line features’ attributes using either lines’ color or their widths. A polygon is again a set of ordered points connected by straight lines. Its only difference from the line is that the first and the last point in a polygon has the same coordinates, and thus close the object. The polygon representation is used to represent shapes and locations of different objects, from a lake or a patch of vegetation, through a building or a city block, to some administrative units. Polygons also have one unique feature - they could have holes. A polygon hole represents an area inside of the polygon but does not belong to it. For example, a lake with an island can be depicted as a polygon with a hole. Values of polygons’ attributes can be represented by the areas (fill) colors. The second part of the vector data model relates to attributes. Attributes are usually stored as a table describing properties of the data. In this table, each column depicts some property, such as an identification number, a name of a feature, or a value of some characteristic. Each row, on the other hand, relates to a single geometry. Simple feature standard makes a clear distinction between single- and multi-element features. We can have a POINT feature and a MULTIPOINT feature, and similarly LINESTRING and MULTILINESTRING, and POLYGON and MULTIPOLYGON. Attribute table clearly shows a main difference between single element features (such as POINT or POLYGON) and multi-element features (such as MULTIPOINT or MULTIPOLYGON). For example, six points stored as POINT features will have six separate rows, while six points stored as just one MULTIPOINT feature will have one row. There are a couple hundreds of file formats that can store spatial vector data. One of the simplest ways to store spatial data is in the form of a text file (.csv) or as a spreadsheet (.xls or .xlsx). While it makes storing point data simple, with two columns representing coordinates, it is not easy to store more complex objects in this way. Text files are also not suitable for storing information about the coordinate reference system used. Historically, the shapefile format (.shp) developed by the ESRI company gained a lot of interest and become the most widely supported spatial vector file format. Despite its popularity, this format has a number of shortcomings, including the need to store several files, attribute names limited to ten characters, the ability to store up to 255 attributes and files up to 2GB, and many more. A fairly recent file format, OGC GeoPackage (.gpkg), was developed as an alternative. It is a single file database free from the limitation of the shapefile format. Other popular spatial vector file formats include GeoJSON (.geojson), GPX (.gpx), and KML (.kml). 2.2.2 The sf package 2.3 Raster data 2.3.1 Raster data model 2.3.2 The stars package 2.4 CRS "],
["nutshell.html", "Chapter 3 tmap in a nutshell", " Chapter 3 tmap in a nutshell "],
["tmshape.html", "Chapter 4 Specifying spatial data with tm_shape 4.1 Map projections (CRS) 4.2 Overview of map projections", " Chapter 4 Specifying spatial data with tm_shape 4.1 Map projections (CRS) 4.1.1 How to put an orange peel flat on the table? NOTE: probably best to move it to Chapter 2, I (Martijn) will do this when the draft is more or less finished. #&gt; Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 7.0.0 We use maps so often in everyday life that most of us probably forget that a map is just a two-dimensional representation of a three-dimensional object, namely the earth. For centuries, geographers and mathematicians wondered what the best way is to do this. Let us wonder with them for a second. The world is shown as an orange below, not just to stimulate your appetite for this subject, but also since an orange peel is a good analogy for a two-dimensional map. A world map can be seen as an orange peel that is put flat on the table. The question is how to do this. FIGURE 4.1: How to peel an orange? When we peel the orange, ideally we want to rip the peel near areas of the earth that are less interesting. What is interesting depends on the application; for applications where land mass is more important than wetlands, it is a good idea to make the rips in the oceans. The (interrupted) Goode homolosine projection, which is shown below, embodies this idea. All continents and countries are preserved, except Antarctica and Greenland. FIGURE 4.2: The (interrupted) Goode homolosine projection To make the analogy between the orange peel and the world map complete, we have to assign two fictitious properties to the orange peel, namely that it is stretchable and deformable. A method to flatten down the earth, for which the Goode homolosine projection shown Figure 4.2 is an example, is called a map projection or Coordinate Reference System (CRS). 4.1.2 Latitude and longitude The grey lines are the longitude and latitude lines, also known as graticules. These lines are also shown in 4.1. The longitude lines are the meridians from north to south pole, and specify the east-west position, where by convention, the longitude = 0\\(^\\circ\\) meridian crosses Royal Observatory in Greenwich, UK. The latitude specifies the north-south position, where latitude = 0\\(^\\circ\\) is the equator, and where the latitudes for the north and south poly are 90\\(^\\circ\\) and -90\\(^\\circ\\) respectively. Mathematically, a map projection is a transformation from latitude and longitude coordinates to another coordinate system, called a coordinate reference system (CRS). It is important to keep in mind that the earth is not a perfect sphere: the radius of the equator is a little larger than the polar radius (about 0.3%). Therefore, geographers model the earth as an ellipsoid. This ellipsoid model is called a (geodetic) datum. There are many (slightly) different datums, but the most popular one is WGS84, which is also used by GPS. Let’s take a closer look at two widely used map projections, namely the plain latitude longitude coordinate system (using the WGS84 datum) and the Web Mercator projection, which is currently the de facto standard for interactive maps. These projections are indexed as EPSG4326 and EPSG3857 respectively. EPSG is an institute that maintains a database of standard map projections. FIGURE 4.3: The WGS84 coordinate system (EPSG4326) When we fictitiously make little holes in the orange peel at both poles, and stretch these open so wide that they have the same width as the equator, we obtain the cylinder depicted in Figure 4.3 (left). Note that the lontitude lines have become straight vertical lines. When we unroll this cylinder, we obtain a map where the x and y coordinates are the longitude and latitude respectively. This CRS, which is known as EPSG4326, is shown in Figure 4.3 (right). Observe since we stretched the poles open, the area near the poles have been stretched out as well. More specifically, the closer the land is to one of the poles, the more it has been stretched out. Since the stretching direction is only horizontally, the shapes of the areas have become wider. A good example is Greenland, which is normally a ‘tall’ area (see Figure 4.1). EPSG4326 is an unprojected CRS, since the longitude and latitude have not been transformed. With projected CRSs, the x and y coordinates refer to specific measurement units, usually meters. The projected variant of this CRS is called the Platte Carrée (EPSG4087), and is exactly the same map (but with other x and y value ranges) as shown in Figure 4.3 (right). 4.1.3 Mercator projection In order to fix these deformed areas, Gerardus Mercator, a Flemish geographer in the 16th century introduced a method to compensate for this by inflating the areas near the poles even more, but now only in a vertical direction. This projection is called the Mercator projection. For web applications, this projection has been slightly modified and renamed to the Web Mercator projection (EPSG3857). The cylinder and plain map that uses this projection are shown in Figure 4.4. FIGURE 4.4: Web Mercator projection (EPSG3857) Although the areas near the poles have been inflated quite a lot, especially Antarctica and Greenland, the shape of the areas is correct (which can be seen by comparing with Figure 4.1). The Mercator projection is very useful for navigational purposes, and has therefore been embraced by sailors ever since. Also today, the Web Mercator is the de facto standard for interactive maps and navigation services. However, for maps that show data the (Web) Mercator projection should be used with great caution, because the hugely inflated areas will influence how we perceive the data. 4.2 Overview of map projections FIGURE 4.5: Lambert azimuthal equal-area projection (EPSG3035) Map projections can be classified by whether the following map properties are preserved: Conformal (true local angles/shapes): A map projection is called conformal when local angles are preserved, and therefore local shapes. The Mercator is an example. Equal-area (true areas): A map projection is called equal-area if the areas are proportional to the true areas. Equidistant (true distances) A map projection is called equidistant if there is one point (usually the center) from which the distances to any other point in the map are preserved. Azimuthal (true-direction) A map projection is called azimuthal if the directions from one point (the center) to any other point are same as the true direction following the surface of the earth. Take home message: plain latitude/longitude coordinates (EPSG 4326) and the Mercator projection (3857) are great for navigation, but less suitable for maps with data, especially world maps. Take home message: before you start mapping, think about which projection is good for the area of interest and for the specific task at hand. "],
["layers.html", "Chapter 5 Layers", " Chapter 5 Layers "],
["othertypes.html", "Chapter 6 Other types", " Chapter 6 Other types "],
["layout.html", "Chapter 7 Layout", " Chapter 7 Layout "],
["interactive.html", "Chapter 8 Interactive settings", " Chapter 8 Interactive settings "],
["multiples.html", "Chapter 9 Small multiples", " Chapter 9 Small multiples "],
["options.html", "Chapter 10 tmap options", " Chapter 10 tmap options "],
["save.html", "Chapter 11 Save maps", " Chapter 11 Save maps "],
["animations.html", "Chapter 12 Animations", " Chapter 12 Animations "],
["shiny.html", "Chapter 13 tmap in shiny", " Chapter 13 tmap in shiny "],
["goodmaps.html", "Chapter 14 How to make good maps?", " Chapter 14 How to make good maps? "],
["references.html", "References", " References "]
]
