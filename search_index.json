[
["index.html", "Elegant and informative maps with tmap Welcome How to contribute?", " Elegant and informative maps with tmap Martijn Tennekes, Jakub Nowosad 2020-06-26 Welcome This is the online home of Elegant and informative maps with tmap, a book on geospatial data visualization with the R-package tmap. This version of the book was built on GH Actions on 2020-06-26. How to contribute? "],
["intro.html", "Chapter 1 Introduction 1.1 What is tmap? 1.2 Thematic maps", " Chapter 1 Introduction This book teaches how to make elegant and informative maps with the R-package tmap. A couple of real-world applications are used to illustrate the whole process from exploring raw spatial data to presenting insightful results. We can distinguish three aspects that are required to make good maps: Software skills Without knowing how to use software for making maps, it will obviously be challenging to make maps with the computer. Yes, back in the old days, people like Henry Drury Harness and Charles Joseph Minard used pen and paper to draw maps, but the computational speed, reproducibility, and interactivity of digital maps cannot be missed. Domain knowledge It is essential to know the background of the data. Where does the data come from? What do the data units represent? What do the variables mean? Since data visualization is all about conveying information, it is obviously important to have domain knowledge in order to make good data visualizations. Data visualization knowledge Someone with software skills and knowledge of a certain domain will be able to make maps of the data. However, these maps will not necessarily be good maps, since visualization of spatial data is trickier than most people think. There are a few underlying principles in data visualization that, when violated, will result in maps that are prone to misinterpretation of the data. The main focus on this book will be on software skills, since our aim is to create maps with tmap. Along the way, we will cover the most important data visualization methodology. Since whole books have been written about it already, we will keep this brief and pragmatic. Obviously, it is not possible to cover the remaining aspect, domain knowledge. However, the example datasets do not require much specific domain knowledge. 1.1 What is tmap? The short answer is that tmap is an R package for visualization spatial data. The slightly longer answer is that tmap allows users to explore, analyze, and present spatial data in a intuitive way. In this book, you will find the long answer. 1.2 Thematic maps "],
["geodata.html", "Chapter 2 Spatial data in R 2.1 Introduction 2.2 Vector data 2.3 Raster data 2.4 CRS-tmp", " Chapter 2 Spatial data in R 2.1 Introduction Vector and raster data models are two basic models used to represent spatial data. These spatial data models are closely related to map making, with each model having its own pros and cons. This chapter describes the vector (section 2.2) and raster (section 2.3) models, and also their implementations in R in the form of the sf (section 2.2.2) and stars (section 2.3.2) packages. Next, it focuses on the map projections (4.1). This section gives a background on why do we need map projections and how to translate spatial data from an ellipsoid into a flat surface or computer screen. It also explains basic terms and gives an overview of map projections. 2.2 Vector data R has several packages aimed to represent spatial vector data. Recently, the terra package has been released containing a new vector data representation. For more than a decade, the sp package was a standard of vector data representation in R. However, now this package is in the maintenance mode only, and its successor, sf is recommended. The tmap package has been using sf since version 2.0. In the two next sections, we introduce vector data model (section 2.2.1) and show how the sf package works with spatial data (section 2.2.2). 2.2.1 Vector data model â€¦ The vector data model consists of two main elements: geometries and attributes. The role of geometry is to describe the location and shape of spatial objects. There are three basic types of geometries: points, lines, and polygons. All of them are build using the same main idea of coordinates. A point is represented by a pair of coordinates, usually described as X and Y. It allows for locating this point in some space. X and Y could be unitless, in degrees, or in some measure units, such as meters. Points can represent features on different scales, from a GPS position, location of a bench in a park, to a city on a small scale map. They are also used to express abstract features, such as locations of map labels. Properties of points can be expressed on maps by different point sizes, colors, or shapes. A line extends the idea of a point. It consists of several points (with coordinates) that are arranged in some order. Consecutive points are connected by straight lines. Therefore, a straight spatial line consists of two points (two pairs of coordinates), while complex spatial lines could be created based on a large number of points. It gives the illusion that the line is curved. Lines are used to representing linear features, such as roads, rivers, boundaries, footpaths, etc. In this case, we can express line featuresâ€™ attributes using either linesâ€™ color or their widths. A polygon is again a set of ordered points connected by straight lines. Its only difference from the line is that the first and the last point in a polygon has the same coordinates, and thus close the object. The polygon representation is used to represent shapes and locations of different objects, from a lake or a patch of vegetation, through a building or a city block, to some administrative units. Polygons also have one unique feature - they could have holes. A polygon hole represents an area inside of the polygon but does not belong to it. For example, a lake with an island can be depicted as a polygon with a hole. The values of polygonsâ€™ attributes can be represented by the areas (fill) colors. The second part of the vector data model relates to attributes. Attributes are usually stored as a table describing the properties of the data. In this table, each column depicts some property, such as an identification number, a name of a feature, or a value of some characteristic. Each row, on the other hand, relates to a single geometry. The above ideas could be implemented in many ways. Currently, the Simple Feature Access seems to be the most widely used standard In it, a feature is every object or concept that have spatial location or extent. Simple feature standard makes a clear distinction between single- and multi-element features. We can have a POINT feature and a MULTIPOINT feature, and similarly LINESTRING and MULTILINESTRING, and POLYGON and MULTIPOLYGON. The main difference between single element features (such as POINT or POLYGON) and multi-element features (such as MULTIPOINT or MULTIPOLYGON) can be clearly seen in attribute tables. For example, six points stored as POINT features will have six separate rows, while six points stored as just one MULTIPOINT feature will have one row. The simple feature standard also describes a number of additional geometry types, including Curve, Surface, or Triangle. Finally, GeometryCollection exists that contain all of the possible geometry types. There are a couple hundreds of file formats that can store spatial vector data. One of the simplest ways to store spatial data is in the form of a text file (.csv) or as a spreadsheet (.xls or .xlsx). While it makes storing point data simple, with two columns representing coordinates, it is not easy to store more complex objects in this way. Text files are also not suitable for storing information about the coordinate reference system used. Historically, the shapefile format (.shp) developed by the ESRI company gained a lot of interest and become the most widely supported spatial vector file format. Despite its popularity, this format has a number of shortcomings, including the need to store several files, attribute names limited to ten characters, the ability to store up to 255 attributes and files up to 2GB, and many more. A fairly recent file format, OGC GeoPackage (.gpkg), was developed as an alternative. It is a single file database free from the limitation of the shapefile format. Other popular spatial vector file formats include GeoJSON (.geojson), GPX (.gpx), and KML (.kml). 2.2.2 The sf package The sf package implements ideas behind the Simple Feature standard. Its main class, sf, has the form of an extended data frame, where each row is a spatial feature. In it, attributes of the vector data are stored as columns. It also has one additional column, most often named geom or geometry1. This column contains geometries in a form of well-known text (WKT), storing all of the coordinates. The sf package can read all of the spatial data formats mentioned in the previous section using the read_sf() function2. # replace this data with some new tmap dataset library(sf) file_path = system.file(&quot;shapes/world.gpkg&quot;, package = &quot;spData&quot;) x = read_sf(file_path) The new object, x, has a sf class. It has 177 features (rows or geometries) and 10 fields (columns with attributes). There is also an 11th column, geom, that stores geometries of each feature. Objects of class sf also display a header containing spatial metadata. It includes geometry type, dimension (XY, XYZ, XYM, XYZM), bounding box (bbox), and information about the used Coordinate Reference System (CRS). x #&gt; Simple feature collection with 177 features and 10 fields #&gt; geometry type: MULTIPOLYGON #&gt; dimension: XY #&gt; bbox: xmin: -180 ymin: -90 xmax: 180 ymax: 83.6 #&gt; geographic CRS: WGS 84 #&gt; [90m# A tibble: 177 x 11[39m #&gt; iso_a2 name_long continent region_un subregion type #&gt; [3m[90m&lt;chr&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m [3m[90m&lt;chr&gt;[39m[23m #&gt; [90m 1[39m FJ Fiji Oceania Oceania Melanesia Soveâ€¦ #&gt; [90m 2[39m TZ Tanzania Africa Africa Eastern â€¦ Soveâ€¦ #&gt; [90m 3[39m EH Western â€¦ Africa Africa Northernâ€¦ Indeâ€¦ #&gt; [90m 4[39m CA Canada North Amâ€¦ Americas Northernâ€¦ Soveâ€¦ #&gt; [90m 5[39m US United Sâ€¦ North Amâ€¦ Americas Northernâ€¦ Counâ€¦ #&gt; [90m 6[39m KZ Kazakhstâ€¦ Asia Asia Central â€¦ Soveâ€¦ #&gt; [90m 7[39m UZ Uzbekistâ€¦ Asia Asia Central â€¦ Soveâ€¦ #&gt; [90m 8[39m PG Papua Neâ€¦ Oceania Oceania Melanesia Soveâ€¦ #&gt; [90m 9[39m ID Indonesia Asia Asia South-Eaâ€¦ Soveâ€¦ #&gt; [90m10[39m AR Argentina South Amâ€¦ Americas South Amâ€¦ Soveâ€¦ #&gt; [90m# â€¦ with 167 more rows, and 5 more variables:[39m #&gt; [90m# area_km2 [3m[90m&lt;dbl&gt;[90m[23m, pop [3m[90m&lt;dbl&gt;[90m[23m, lifeExp [3m[90m&lt;dbl&gt;[90m[23m,[39m #&gt; [90m# gdpPercap [3m[90m&lt;dbl&gt;[90m[23m, geom [3m[90m&lt;MULTIPOLYGON [Â°]&gt;[90m[23m[39m The x object has MULTIPOLYGON geometry type, where each feature (row) can consist of one or more polygons. Each polygonâ€™s vertices are represented by a pair of values (dimension: XY). Bounding box allows to quickly understand the spatial extension of the input data. Finally, it has geographic CRS named WGS 84. You can learn more about Coordinate Reference Systems in section 4.1. Spatial vector data of class sf can be also obtained using some of other R data packages. For example, rnaturalearth allows to download world map data, osmdata imports OpenStreetMap data as sf objects, and tigris loads TIGER/Line data. The tmap package accepts spatial vector data objects from both sf and sp packages. In case of having vector objects in a different representation, they should be converted into sf objects first, before making maps. The sf package has the st_as_sf() function that translates objects of many classes, including Spatial (from the sp package), ppp, psp, and lpp (from the spatstat package), to the objects of class sf. The st_as_sf() function also allows to turn data frames into sf objects - the user need to provide the input data frame, names of columns with coordinates, and additionally definition of the CRS of the data. For example my_sf = st_as_sf(my_df, coords = c(\"Xcolumn\", \"Ycolumn\"), crs = 4326). 2.3 Raster data Several R packages can be used to represent spatial raster data, including raster and its successor terra. The raster package was used as a backbone of raster data visualization until tmap version 3.0. In the two next sections, we present raster data model (section 2.3.1) and introduce the stars package (section 2.3.2). 2.3.1 Raster data model The raster data model represents the world using a continuous grid of cells. Each cell has an associated value #&gt; To access larger datasets in this package, #&gt; install the spDataLarge package with: #&gt; `install.packages(&#39;spDataLarge&#39;, #&gt; repos=&#39;https://nowosad.github.io/drat/&#39;, #&gt; type=&#39;source&#39;)` #&gt; Loading required package: abind 2.3.2 The stars package 2.4 CRS-tmp However, any other names are also possible.â†©ï¸Ž It is also possible to read spatial vector data using the st_read() function, which differs from read_sf() by having different default arguments.â†©ï¸Ž "],
["nutshell.html", "Chapter 3 tmap in a nutshell", " Chapter 3 tmap in a nutshell "],
["tmshape.html", "Chapter 4 Specifying spatial data with tm_shape 4.1 Map projections (CRS) 4.2 Overview of map projections", " Chapter 4 Specifying spatial data with tm_shape 4.1 Map projections (CRS) 4.1.1 How to put an orange peel flat on the table? We use maps so often in everyday life that most of us probably forget that a map is just a two-dimensional representation of a three-dimensional object, namely the earth. For centuries, geographers and mathematicians wondered what the best way is to do this. Let us wonder with them for a second. The world is shown as an orange below, not just to stimulate your appetite for this subject, but also since an orange peel is a good analogy for a two-dimensional map. A world map can be seen as an orange peel that is put flat on the table. The question is how to do this. FIGURE 4.1: How to peel an orange? When we peel the orange, ideally we want to rip the peel near areas of the earth that are less interesting. What is interesting depends on the application; for applications where land mass is more important than wetlands, it is a good idea to make the rips in the oceans. The (interrupted) Goode homolosine projection, which is shown below, embodies this idea. All continents and countries are preserved, except Antarctica and Greenland. FIGURE 4.2: The (interrupted) Goode homolosine projection To make the analogy between the orange peel and the surface of the earth complete, we have to assign two fictitious properties to the orange peel, namely that it is stretchable and deformable. These properties are needed in order to make a non-interrupted map, as we will see in the next sections. A method to flatten down the earth, for which the Goode homolosine projection shown Figure 4.2 is an example, is called a map projection. Technically, it is also known as a coordinate reference system (crs), which specifies the corresponding coordinate system, as well as the transformations to other map projections. 4.1.2 How to model the surface of the earth? The orange and the earth have another thing in common; both are spheres, but not perfect ones. The earth is metaphorically speaking a little fat: the circumference around the equator is 40,075 km whereas around the circumference that crosses both poles is 40,009 km. Therefore, the earth can better be described as an ellipsoid. The same applies to an orange; every orange is a little different, but probably very few oranges are perfect spheres. Although the ellipsoid is a good mathematical model to describe the earthâ€™s surface, keep in mind that the surface of the earth is not smooth; land mass usually lies on a higher altitude than sea level. We could potentially map each point on the surface of the earth using a three-dimensional \\((x, y, z)\\) Cartesian coordinate system with the center of the mass of the Earth being the origin (0, 0, 0). However, since this has many mathematical complications, the ellipsoid is often sufficient as a model of the surface of the earth. This ellipsoid model and its translation to the Earthâ€™ surface is called a (geodetic) datum. The most popular datum is WGS84, which has been introduced in 1984 as an international standard, and has been last revised in 2004. There are many (slightly) different datums, which are often tailored for local applications. For instance, NAD83, ETRS89, and GDA94 are slightly better models for North-America, Europe, and Australia respectively. However, since WGS84 is a very good approximation of the earth as a whole, it has been widely adopted worldwide and is also used by the Global Positioning System (GPS). When we have specified a datum, we are able to specify geographic locations with two familiar variables, namely latitude and longitude. The latitude specifies the north-south position in degrees, where latitude = 0\\(^\\circ\\) is the equator. The latitudes for the north and south pole are 90\\(^\\circ\\) and \\(-90^\\circ\\) respectively. The longitude specifies the east-west position in degrees, where by convention, the longitude = 0\\(^\\circ\\) meridian crosses the Royal Observatory in Greenwich, UK. The Longitude range is -180\\(^\\circ\\) to 180\\(^\\circ\\), and since this is a full circle, -180\\(^\\circ\\) and \\(^\\circ\\) specify the same longitude. When we see the earth in its three-dimensional form, as in Figure 4.1, the latitude parallels are the horizontal lines around the earth, and the longitude meridians are the vertical lines around the earth. The set of longitude meridians and latitude parallels is also referred to as graticule. In all the figures in this section, latitude parallels are shown as gray lines for \\(-60^\\circ\\), \\(-30^\\circ\\), \\(0^\\circ\\), \\(30^\\circ\\) and \\(60^\\circ\\), and longitude meridians from \\(-180^\\circ\\) to \\(180^\\circ\\) at every \\(30^\\circ\\). Please keep in mind that only a latitude and longitude are not sufficient to specify a geographic location. A datum is required. When people exchange latitude longitude data, it is save to assume that they implicitly have used the WGS84 datum. However, it is good practice to specify the datum explicitly. 4.1.3 Platte CarrÃ©e and Web Mercator Letâ€™s take a closer look at two widely used map projections, namely the plain latitude longitude coordinate system (using the WGS84 datum) and the Web Mercator projection, which is currently the de facto standard for interactive maps. These projections are indexed as EPSG4326 and EPSG3857 respectively. EPSG is an institute that maintains a database of standard map projections. FIGURE 4.3: The WGS84 coordinate system (EPSG4326) When we fictitiously make little holes in the orange peel at both poles, and stretch these open so wide that they have the same width as the equator, we obtain the cylinder depicted in Figure 4.3 (left). Note that the lontitude lines have become straight vertical lines. When we unroll this cylinder, we obtain a map where the \\(x\\) and \\(y\\) coordinates are the longitude and latitude respectively. This CRS, which is known as EPSG4326, is shown in Figure 4.3 (right). EPSG4326 is an unprojected CRS, since the longitude and latitude have not been transformed. With projected CRSs, the \\(x\\) and \\(y\\) coordinates refer to specific measurement units, usually meters. The projected variant of this CRS is called the Platte CarrÃ©e (EPSG4087), and is exactly the same map as shown in Figure 4.3 (right), but with other \\(x\\) and \\(y\\) value ranges. Observe since we stretched the poles open, the area near the poles have been stretched out as well. More specifically, the closer the land is to one of the poles, the more it has been stretched out. Since the stretching direction is only horizontally, the shapes of the areas have become wider. A good example is Greenland, which is normally a â€˜tallâ€™ area (as can be seen in Figure 4.1). In order to fix these deformed areas, Gerardus Mercator, a Flemish geographer in the 16th century introduced a method to compensate for this by inflating the areas near the poles even more, but now only in a vertical direction. This projection is called the Mercator projection. For web applications, this projection has been slightly modified and renamed to the Web Mercator projection (EPSG3857). The cylinder and plain map that uses this projection are shown in Figure 4.4. FIGURE 4.4: Web Mercator projection (EPSG3857) Although the areas near the poles have been inflated quite a lot, especially Antarctica and Greenland, the shape of the areas is correct (which can be seen by comparing with Figure 4.1). The Mercator projection is very useful for navigational purposes, and has therefore been embraced by sailors ever since. Also today, the Web Mercator is the de facto standard for interactive maps and navigation services. However, for maps that show data the (Web) Mercator projection should be used with great caution, because the hugely inflated areas will influence how we perceive spatial data. We will discuss this in the next section. 4.2 Overview of map projections FIGURE 4.5: Lambert azimuthal equal-area projection (EPSG3035) Map projections can be classified by whether the following map properties are preserved: The standard set of comparison operators can be used in the filter() function, as illustrated in Table 4.1: TABLE 4.1: Map projection properties. Name Preserved property Conformal Local angle (shape) Equal area Area Equidistant Distance Azimuthal Direction Conformal (true local angles/shapes): A map projection is called conformal when local angles are preserved, and therefore local shapes. The Mercator is an example. Equal-area (true areas): A map projection is called equal-area if the areas are proportional to the true areas. Equidistant (true distances) A map projection is called equidistant if there is one point (usually the center) from which the distances to any other point in the map are preserved. Azimuthal (true-direction) A map projection is called azimuthal if the directions from one point (the center) to any other point are same as the true direction following the surface of the earth. Take home message: plain latitude/longitude coordinates (EPSG 4326) and the Mercator projection (3857) are great for navigation, but less suitable for maps with data, especially world maps. Take home message: before you start mapping, think about which projection is good for the area of interest and for the specific task at hand. "],
["layers.html", "Chapter 5 Layers", " Chapter 5 Layers "],
["othertypes.html", "Chapter 6 Other types", " Chapter 6 Other types "],
["layout.html", "Chapter 7 Layout", " Chapter 7 Layout "],
["interactive.html", "Chapter 8 Interactive settings", " Chapter 8 Interactive settings "],
["multiples.html", "Chapter 9 Small multiples", " Chapter 9 Small multiples "],
["options.html", "Chapter 10 tmap options", " Chapter 10 tmap options "],
["save.html", "Chapter 11 Save maps", " Chapter 11 Save maps "],
["animations.html", "Chapter 12 Animations", " Chapter 12 Animations "],
["shiny.html", "Chapter 13 tmap in shiny", " Chapter 13 tmap in shiny "],
["goodmaps.html", "Chapter 14 How to make good maps?", " Chapter 14 How to make good maps? "],
["references.html", "References", " References "]
]
